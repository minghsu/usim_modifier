#!/usr/bin/env python3
# -*- coding:utf-8 -*-
from enum import Enum, unique


@unique
class TLV_TAG(Enum):
    FCP_TEMPLATE = 0x62
    FILE_DESCRIPTOR = 0x82
    FILE_IDENTIFIER = 0x83
    DF_OR_AID_NAME = 0x84             # DF, AID
    PROPRIETARY_INFORMATION = 0xA5
    LIFE_CYCLE_STATUS_INTEGER = 0x8A
    SECURITY_ATTRIBUTES_8B = 0x8B
    SECURITY_ATTRIBUTES_8C = 0x8C
    SECURITY_ATTRIBUTES_AB = 0xAB
    PIN_STATUS_TEMPLATE_DO = 0xC6
    TOTAL_FILE_SIZE = 0x81
    FILE_SIZE = 0x80
    SFI_IDENTIFIER = 0x88


def search_fcp_content(arg_bytes=[], arg_tag=None):
    """Returns an FCP content by TLV tag
    @param arg_bytes:  a list of bytes to stringify,
      e.g. [0x62, 0x1D, 0x82, 0x02, 0x78, 0x21, 0x83, 0x02, 0x3F, 0x00, 
            0xA5, 0x03, 0x80, 0x01, 0x71, 0x8A, 0x01, 0x05, 0x8B, 0x03, 
            0x2F, 0x06, 0x01, 0xC6, 0x06, 0x90, 0x01, 0x00, 0x83, 0x01, 
            0x01]

    @param arg_tag: Which TAG for search? 
      - 0x62: FCP template tag 
      - 0x82: File Descriptor
      - 0x83: File Identifier
      - 0x84: DF name (AID)
      - 0xA5: Proprietary information
      - 0x8A: Life Cycle Status Integer
      - 0x8B, 0x8C, 0xAB: Security attributes
      - 0xC6: PIN Status Template DO
      - 0x81: Total file size
      - 0x80: File size
      - 0x88: Short File Identifier (SFI)

      PS. Refer 'ETSI TS 102 221'

    >> vals = [0x62, 0x1D, 0x82, 0x02, 0x78, 0x21, 0x83, 0x02, 
               0x3F, 0x00, 0xA5, 0x03, 0x80, 0x01, 0x71, 0x8A, 
               0x01, 0x05, 0x8B, 0x03, 0x2F, 0x06, 0x01, 0xC6, 
               0x06, 0x90, 0x01, 0x00, 0x83, 0x01, 0x01]
    >> search_fcp_content(vals, 0x82)
    '0x82, 0x02, 0x78, 0x21'
    >> search_fcp_content(vals, 0xC6)
    '0xC6, 0x06, 0x90, 0x01, 0x00, 0x83, 0x01, 0x01'
    >> search_fcp_content(vals, 0x62)
    '0x62, 0x1D, 0x82, 0x02, 0x78, 0x21, 0x83, 0x02, 0x3F, 0x00, 
     0xA5, 0x03, 0x80, 0x01, 0x71, 0x8A, 0x01, 0x05, 0x8B, 0x03, 
     0x2F, 0x06, 0x01, 0xC6, 0x06, 0x90, 0x01, 0x00, 0x83, 0x01, 
     0x01'
    """
    ret_content = []

    if len(arg_bytes) > 0 and arg_tag != None and arg_bytes[0] == TLV_TAG.FCP_TEMPLATE.value:

        if arg_tag == TLV_TAG.FCP_TEMPLATE.value:
            return arg_bytes
        else:
            curr_ptr = arg_bytes[2:]

        while (True):
            if curr_ptr[0] == arg_tag:
                ret_content = curr_ptr[:2+int(curr_ptr[1])]
                break
            elif (len(curr_ptr) - (int(curr_ptr[1])+2) > 0):
                curr_ptr = curr_ptr[2+int(curr_ptr[1]):]
            else:
                break

    return ret_content
